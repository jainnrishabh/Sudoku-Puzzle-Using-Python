import queue
from data import * 


#Part 1
variables = {'C11': [1], 'C12': [], 'C13': [], 'C14': [], 'C21': [], 'C22': [2], 'C23': [], 'C24': [], 'C31': [], 'C32': [], 'C33': [3], 'C34': [], 'C41': [], 'C42': [], 'C43': [], 'C44': [4]}

constraints = [
    (('C11', 'C12'), [1, 2], [1, 3], [1, 4], [2, 1], [2, 3], [2, 4], [3, 1], [3, 2], [3, 4], [4, 1], [4, 2], [4, 3]),
    (('C11', 'C13'), [1, 2], [1, 3], [1, 4], [2, 1], [2, 3], [2, 4], [3, 1], [3, 2], [3, 4], [4, 1], [4, 2], [4, 3]),
    (('C11', 'C14'), [1, 2], [1, 3], [1, 4], [2, 1], [2, 3], [2, 4], [3, 1], [3, 2], [3, 4], [4, 1], [4, 2], [4, 3]),
    (('C11', 'C21'), [1, 2], [1, 3], [1, 4], [2, 1], [2, 3], [2, 4], [3, 1], [3, 2], [3, 4], [4, 1], [4, 2], [4, 3]),
    (('C11', 'C22'), [1, 2], [1, 3], [1, 4], [2, 1], [2, 3], [2, 4], [3, 1], [3, 2], [3, 4], [4, 1], [4, 2], [4, 3]),
    (('C11', 'C31'), [1, 2], [1, 3], [1, 4], [2, 1], [2, 3], [2, 4], [3, 1], [3, 2], [3, 4], [4, 1], [4, 2], [4, 3]),
    (('C11', 'C41'), [1, 2], [1, 3], [1, 4], [2, 1], [2, 3], [2, 4], [3, 1], [3, 2], [3, 4], [4, 1], [4, 2], [4, 3]),

    (('C12', 'C13'), [1, 2], [1, 3], [1, 4], [2, 1], [2, 3], [2, 4], [3, 1], [3, 2], [3, 4], [4, 1], [4, 2], [4, 3]),
    (('C12', 'C14'), [1, 2], [1, 3], [1, 4], [2, 1], [2, 3], [2, 4], [3, 1], [3, 2], [3, 4], [4, 1], [4, 2], [4, 3]),
    (('C12', 'C22'), [1, 2], [1, 3], [1, 4], [2, 1], [2, 3], [2, 4], [3, 1], [3, 2], [3, 4], [4, 1], [4, 2], [4, 3]),
    (('C12', 'C32'), [1, 2], [1, 3], [1, 4], [2, 1], [2, 3], [2, 4], [3, 1], [3, 2], [3, 4], [4, 1], [4, 2], [4, 3]),
    (('C12', 'C42'), [1, 2], [1, 3], [1, 4], [2, 1], [2, 3], [2, 4], [3, 1], [3, 2], [3, 4], [4, 1], [4, 2], [4, 3]),
    (('C12', 'C21'), [1, 2], [1, 3], [1, 4], [2, 1], [2, 3], [2, 4], [3, 1], [3, 2], [3, 4], [4, 1], [4, 2], [4, 3]),

    (('C13', 'C14'), [1, 2], [1, 3], [1, 4], [2, 1], [2, 3], [2, 4], [3, 1], [3, 2], [3, 4], [4, 1], [4, 2], [4, 3]),
    (('C13', 'C23'), [1, 2], [1, 3], [1, 4], [2, 1], [2, 3], [2, 4], [3, 1], [3, 2], [3, 4], [4, 1], [4, 2], [4, 3]),
    (('C13', 'C24'), [1, 2], [1, 3], [1, 4], [2, 1], [2, 3], [2, 4], [3, 1], [3, 2], [3, 4], [4, 1], [4, 2], [4, 3]),
    (('C13', 'C33'), [1, 2], [1, 3], [1, 4], [2, 1], [2, 3], [2, 4], [3, 1], [3, 2], [3, 4], [4, 1], [4, 2], [4, 3]),
    (('C13', 'C43'), [1, 2], [1, 3], [1, 4], [2, 1], [2, 3], [2, 4], [3, 1], [3, 2], [3, 4], [4, 1], [4, 2], [4, 3]),

    (('C14', 'C23'), [1, 2], [1, 3], [1, 4], [2, 1], [2, 3], [2, 4], [3, 1], [3, 2], [3, 4], [4, 1], [4, 2], [4, 3]),
    (('C14', 'C24'), [1, 2], [1, 3], [1, 4], [2, 1], [2, 3], [2, 4], [3, 1], [3, 2], [3, 4], [4, 1], [4, 2], [4, 3]),
    (('C14', 'C34'), [1, 2], [1, 3], [1, 4], [2, 1], [2, 3], [2, 4], [3, 1], [3, 2], [3, 4], [4, 1], [4, 2], [4, 3]),
    (('C14', 'C44'), [1, 2], [1, 3], [1, 4], [2, 1], [2, 3], [2, 4], [3, 1], [3, 2], [3, 4], [4, 1], [4, 2], [4, 3]),

    (('C21', 'C22'), [1, 2], [1, 3], [1, 4], [2, 1], [2, 3], [2, 4], [3, 1], [3, 2], [3, 4], [4, 1], [4, 2], [4, 3]),
    (('C21', 'C23'), [1, 2], [1, 3], [1, 4], [2, 1], [2, 3], [2, 4], [3, 1], [3, 2], [3, 4], [4, 1], [4, 2], [4, 3]),
    (('C21', 'C24'), [1, 2], [1, 3], [1, 4], [2, 1], [2, 3], [2, 4], [3, 1], [3, 2], [3, 4], [4, 1], [4, 2], [4, 3]),
    (('C21', 'C31'), [1, 2], [1, 3], [1, 4], [2, 1], [2, 3], [2, 4], [3, 1], [3, 2], [3, 4], [4, 1], [4, 2], [4, 3]),
    (('C21', 'C41'), [1, 2], [1, 3], [1, 4], [2, 1], [2, 3], [2, 4], [3, 1], [3, 2], [3, 4], [4, 1], [4, 2], [4, 3]),

    (('C22', 'C23'), [1, 2], [1, 3], [1, 4], [2, 1], [2, 3], [2, 4], [3, 1], [3, 2], [3, 4], [4, 1], [4, 2], [4, 3]),
    (('C22', 'C24'), [1, 2], [1, 3], [1, 4], [2, 1], [2, 3], [2, 4], [3, 1], [3, 2], [3, 4], [4, 1], [4, 2], [4, 3]),
    (('C22', 'C32'), [1, 2], [1, 3], [1, 4], [2, 1], [2, 3], [2, 4], [3, 1], [3, 2], [3, 4], [4, 1], [4, 2], [4, 3]),
    (('C22', 'C42'), [1, 2], [1, 3], [1, 4], [2, 1], [2, 3], [2, 4], [3, 1], [3, 2], [3, 4], [4, 1], [4, 2], [4, 3]),

    (('C23', 'C24'), [1, 2], [1, 3], [1, 4], [2, 1], [2, 3], [2, 4], [3, 1], [3, 2], [3, 4], [4, 1], [4, 2], [4, 3]),
    (('C23', 'C33'), [1, 2], [1, 3], [1, 4], [2, 1], [2, 3], [2, 4], [3, 1], [3, 2], [3, 4], [4, 1], [4, 2], [4, 3]),
    (('C23', 'C43'), [1, 2], [1, 3], [1, 4], [2, 1], [2, 3], [2, 4], [3, 1], [3, 2], [3, 4], [4, 1], [4, 2], [4, 3]),

    (('C24', 'C34'), [1, 2], [1, 3], [1, 4], [2, 1], [2, 3], [2, 4], [3, 1], [3, 2], [3, 4], [4, 1], [4, 2], [4, 3]),
    (('C24', 'C44'), [1, 2], [1, 3], [1, 4], [2, 1], [2, 3], [2, 4], [3, 1], [3, 2], [3, 4], [4, 1], [4, 2], [4, 3]),

    (('C31', 'C32'), [1, 2], [1, 3], [1, 4], [2, 1], [2, 3], [2, 4], [3, 1], [3, 2], [3, 4], [4, 1], [4, 2], [4, 3]),
    (('C31', 'C33'), [1, 2], [1, 3], [1, 4], [2, 1], [2, 3], [2, 4], [3, 1], [3, 2], [3, 4], [4, 1], [4, 2], [4, 3]),
    (('C31', 'C34'), [1, 2], [1, 3], [1, 4], [2, 1], [2, 3], [2, 4], [3, 1], [3, 2], [3, 4], [4, 1], [4, 2], [4, 3]),
    (('C31', 'C41'), [1, 2], [1, 3], [1, 4], [2, 1], [2, 3], [2, 4], [3, 1], [3, 2], [3, 4], [4, 1], [4, 2], [4, 3]),
    (('C31', 'C42'), [1, 2], [1, 3], [1, 4], [2, 1], [2, 3], [2, 4], [3, 1], [3, 2], [3, 4], [4, 1], [4, 2], [4, 3]),

    (('C32', 'C33'), [1, 2], [1, 3], [1, 4], [2, 1], [2, 3], [2, 4], [3, 1], [3, 2], [3, 4], [4, 1], [4, 2], [4, 3]),
    (('C32', 'C34'), [1, 2], [1, 3], [1, 4], [2, 1], [2, 3], [2, 4], [3, 1], [3, 2], [3, 4], [4, 1], [4, 2], [4, 3]),
    (('C32', 'C42'), [1, 2], [1, 3], [1, 4], [2, 1], [2, 3], [2, 4], [3, 1], [3, 2], [3, 4], [4, 1], [4, 2], [4, 3]),
    (('C32', 'C41'), [1, 2], [1, 3], [1, 4], [2, 1], [2, 3], [2, 4], [3, 1], [3, 2], [3, 4], [4, 1], [4, 2], [4, 3]),

    (('C33', 'C34'), [1, 2], [1, 3], [1, 4], [2, 1], [2, 3], [2, 4], [3, 1], [3, 2], [3, 4], [4, 1], [4, 2], [4, 3]),
    (('C33', 'C43'), [1, 2], [1, 3], [1, 4], [2, 1], [2, 3], [2, 4], [3, 1], [3, 2], [3, 4], [4, 1], [4, 2], [4, 3]),
    (('C33', 'C44'), [1, 2], [1, 3], [1, 4], [2, 1], [2, 3], [2, 4], [3, 1], [3, 2], [3, 4], [4, 1], [4, 2], [4, 3]),
    
    (('C34', 'C44'), [1, 2], [1, 3], [1, 4], [2, 1], [2, 3], [2, 4], [3, 1], [3, 2], [3, 4], [4, 1], [4, 2], [4, 3]),
    (('C34', 'C43'), [1, 2], [1, 3], [1, 4], [2, 1], [2, 3], [2, 4], [3, 1], [3, 2], [3, 4], [4, 1], [4, 2], [4, 3]),    

    (('C41', 'C42'), [1, 2], [1, 3], [1, 4], [2, 1], [2, 3], [2, 4], [3, 1], [3, 2], [3, 4], [4, 1], [4, 2], [4, 3]),    
    (('C41', 'C43'), [1, 2], [1, 3], [1, 4], [2, 1], [2, 3], [2, 4], [3, 1], [3, 2], [3, 4], [4, 1], [4, 2], [4, 3]),    
    (('C41', 'C44'), [1, 2], [1, 3], [1, 4], [2, 1], [2, 3], [2, 4], [3, 1], [3, 2], [3, 4], [4, 1], [4, 2], [4, 3]),    
    
    (('C42', 'C43'), [1, 2], [1, 3], [1, 4], [2, 1], [2, 3], [2, 4], [3, 1], [3, 2], [3, 4], [4, 1], [4, 2], [4, 3]),    
    (('C42', 'C44'), [1, 2], [1, 3], [1, 4], [2, 1], [2, 3], [2, 4], [3, 1], [3, 2], [3, 4], [4, 1], [4, 2], [4, 3]),    
    (('C42', 'C13'), [1, 2], [1, 3], [1, 4], [2, 1], [2, 3], [2, 4], [3, 1], [3, 2], [3, 4], [4, 1], [4, 2], [4, 3]),    
    (('C42', 'C23'), [1, 2], [1, 3], [1, 4], [2, 1], [2, 3], [2, 4], [3, 1], [3, 2], [3, 4], [4, 1], [4, 2], [4, 3]),    
    
    (('C43', 'C44'), [1, 2], [1, 3], [1, 4], [2, 1], [2, 3], [2, 4], [3, 1], [3, 2], [3, 4], [4, 1], [4, 2], [4, 3]),      
]

digits =  cols = "1234"
rows = "1234"

def cross(A, B):
	return ["C" + a + b for a in A for b in B]

squares = cross(rows, cols)

class csp:
	def __init__ (self, domain = digits, grid = ""):
		self.variables = squares
		self.domain = self.getDict(grid)
		self.values = self.getDict(grid)
				
		self.unitlist = ([cross(rows, c) for c in cols] +
            			 [cross(r, cols) for r in rows] +
            			 [cross(rs, cs) for rs in ('12','34') for cs in ('12','34')])

		self.units = dict((s, [u for u in self.unitlist if s in u]) for s in squares)
		
		self.neighbors = dict((s, set(sum(self.units[s],[]))-set([s])) for s in squares)
		self.constraints = {(variable, peer) for variable in self.variables for peer in self.neighbors[variable]}
		# self.constraints = { constraints[i][0] for i in range(0,len(constraints)) }

	
	def getDict(self, grid=""):
		i = 0
		values = dict()
		for cell in self.variables:
			if grid[i]!='0':
				values[cell] = grid[i]
			else:
				values[cell] = digits
			i = i + 1
		return values
	

#--------------------------------------------------------------------------------------------------------------------------------------
#Part 2 	
def Revise(csp, Xi, Xj):
	revised = False
	values = set(csp.values[Xi])

	for x in values:
		if not isconsistent(csp, x, Xi, Xj):
			csp.values[Xi] = csp.values[Xi].replace(x, '')
			revised = True 

	return revised 

def isconsistent(csp, x, Xi, Xj):
	for y in csp.values[Xj]:
		if Xj in csp.neighbors[Xi] and y!=x:
			return True

	return False

# sudoku = csp(grid = '1000020000300004')

#--------------------------------------------------------------------------------------------------------------------------------------
# Part 3 
def AC3(csp):
	q = queue.Queue()

	for arc in csp.constraints:
		q.put(arc)
	
	i = 0
	while not q.empty():
		(Xi, Xj) = q.get()
		i = i + 1 

		if Revise(csp, Xi, Xj):
			if len(csp.values[Xi]) == 0:
				return False

			for Xk in (csp.neighbors[Xi] - set(Xj)):
				q.put((Xk, Xi))

	return True 

sudoku = csp(grid='1000020000300004')

def isComplete(csp):
	for variable in squares:
		if len(csp.values[variable])>1:
			return False
	return True

def write(values):
	output = ""
	for variable in squares:
		output = output + values[variable]
	return output

# print(AC3(sudoku))
print(sudoku.constraints)
#--------------------------------------------------------------------------------------------------------------------------------------
#Part 4


# {('C33', 'C34'), ('C43', 'C44'), ('C14', 'C34'), ('C22', 'C23'), ('C32', 'C31'), ('C44', 'C34'), ('C32', 'C12'), ('C11', 'C22'), ('C23', 'C33'), ('C33', 'C31'), ('C23', 'C43'), ('C33', 'C44'), ('C11', 'C13'), ('C14', 'C44'), ('C21', 'C12'), ('C31', 'C34'), ('C42', 'C32'), ('C12', 'C21'), ('C13', 'C12'), ('C23', 'C13'), ('C24', 'C22'), ('C24', 'C23'), ('C14', 'C12'), ('C21', 'C23'), ('C31', 'C42'), ('C43', 'C42'), ('C32', 'C42'), ('C24', 'C13'), ('C41', 'C42'), ('C24', 'C34'), ('C22', 'C12'), ('C11', 'C31'), ('C13', 'C14'), ('C44', 'C14'), ('C41', 'C31'), ('C42', 'C22'), ('C11', 'C12'), ('C44', 'C42'), ('C34', 'C33'), ('C41', 'C44'), ('C42', 'C43'), ('C34', 'C43'), ('C13', 'C11'), ('C14', 'C11'), ('C21', 'C31'), ('C34', 'C24'), ('C24', 'C44'), ('C12', 'C32'), ('C22', 'C42'), ('C11', 'C14'), ('C31', 'C41'), ('C43', 'C41'), ('C34', 'C32'), ('C23', 'C14'), ('C22', 'C11'), ('C32', 'C41'), ('C42', 'C31'), ('C31', 'C11'), ('C24', 'C14'), ('C42', 'C44'), ('C21', 'C41'), ('C41', 'C11'), ('C42', 'C12'), ('C12', 'C22'), ('C44', 'C41'), ('C21', 'C11'), ('C12', 'C13'), ('C22', 'C21'), ('C42', 'C41'), ('C31', 'C21'), ('C11', 'C41'), ('C13', 'C24'), ('C23', 'C21'), ('C14', 'C24'), ('C44', 'C24'), ('C41', 'C21'), ('C34', 'C31'), ('C33', 'C32'), ('C24', 'C21'), ('C34', 'C44'), ('C22', 'C24'), ('C43', 'C23'), ('C31', 'C33'), ('C43', 'C33'), ('C23', 'C22'), ('C32', 'C22'), ('C32', 'C33'), ('C43', 'C13'), ('C22', 'C32'), ('C12', 'C14'), ('C23', 'C24'), ('C41', 'C43'), ('C43', 'C34'), ('C34', 'C14'), ('C21', 'C22'), ('C12', 'C42'), ('C31', 'C32'), ('C33', 'C23'), ('C13', 'C23'), ('C32', 'C34'), ('C13', 'C33'), ('C14', 'C23'), ('C33', 'C43'), ('C13', 'C43'), ('C44', 'C33'), ('C11', 'C21'), ('C21', 'C24'), ('C12', 'C11'), ('C41', 'C32'), ('C44', 'C43'), ('C33', 'C13'), ('C14', 'C13')}